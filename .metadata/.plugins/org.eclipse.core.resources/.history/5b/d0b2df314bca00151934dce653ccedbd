package com.mafurag.org.clients.resources;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.mafurag.org.clients.model.Client;
import com.mafurag.org.clients.model.Order;
import com.mafurag.org.clients.service.ClientService;
import com.mafurag.org.clients.service.OrderService;

/**
 * 
 * @author MafuraG
 *
 */

@Path("/clients")
public class ClientResource {
	
	ClientService cs= new ClientService();
	OrderService os = new OrderService();
	/**
	 * Creates mock clients and their orders
	 */
	@GET
	@Path("/mock")
	@Produces(MediaType.APPLICATION_JSON)
	public void CreateMocks(){		
		cs.createMocks();
	}
	
	/*
	 * Get list of ALL clients
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Client> getClients(){		
		return cs.getAllClients();
	}
	
	/**
	 * 
	 * @param clientId
	 * @return client with given ID
	 */
	@GET
	@Path("/{clientId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Client getClient(@PathParam("clientId") Long clientId){
		return cs.getClient(clientId);
	}
	
	/**
	 * Method creates new client
	 * @param client
	 * @return newly created client
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Client addClient(Client client){
		return cs.addClient(client);
	}
	
	/**
	 * Method updates a client
	 * @param clientId
	 * @param client
	 * @return updated client
	 */
	@PUT
	@Path("/{clientId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public  Client updateClient(@PathParam("clientId") Long clientId, Client client){
		client.setId(clientId);
		return cs.updateClient(client);
	}
	
	/**
	 * Method deletes a client
	 * @param clientId
	 * @return message confirming deletion of client
	 */
	@DELETE
	@Path("/{clientId}")
	@Produces(MediaType.APPLICATION_JSON)
	public  String deleteClient(@PathParam("clientId") Long clientId){		
		cs.removeClient(clientId);
		return "Deleted client id = " + clientId;
	}
	
	/**
	 * Method gets list of orders by client
	 * @param clientId
	 * @return list of orders made by client
	 */
	@GET
	@Path("/{clientId}/orders")
	@Produces(MediaType.APPLICATION_JSON)
	public List<Order> getOrders(@PathParam("clientId") Long clientId){		
		return os.getOrders(clientId);
	}
	
	/**
	 * Method updates a client order
	 * @param clientId
	 * @param order
	 * @return
	 */
	@POST
	@Path("/{clientId}/orders")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Order addOrder(@PathParam("clientId") Long clientId, Order order){
		Client c = cs.getClient(clientId);
		order.setClient(c);
		return os.addOrder(order);
	}
	
	/**
	 * Get order by ID
	 * @param clientId
	 * @param orderId
	 * @return order 
	 */
	@GET
	@Path("/{clientId}/orders/{orderId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Order getOrder(@PathParam("clientId") Long clientId, @PathParam("orderId") Long orderId){		
		return os.getOrder(orderId);
	}
	
	/**
	 * Method updates given order
	 * @param clientId
	 * @param orderId
	 * @param order
	 * @return updated order
	 */
	
	@PUT
	@Path("/{clientId}/orders/{orderId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Order updateOrder(@PathParam("clientId") Long clientId, @PathParam("orderId") Long orderId, Order order){
		Client c = cs.getClient(clientId);
		order.setClient(c);
		order.setId(orderId);
		return os.updateOrder(order);
	}
	
	/**
	 * Method deletes given order
	 * @param clientId
	 * @param orderId
	 * @return message confirming deletion
	 */
	@DELETE
	@Path("/{clientId}/orders/{orderId}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public String deleteOrder(@PathParam("clientId") Long clientId, @PathParam("orderId") Long orderId){
		os.removeOrder(orderId);
		return "Deleted order id = " + orderId;
	}

}
